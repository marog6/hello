import { GoogleGenerativeAI } from '@google/generative-ai'

// Get API key from environment variables
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY

let genAI = null

// Initialize AI service automatically if API key is available
if (API_KEY && API_KEY !== 'your_api_key_here') {
  genAI = new GoogleGenerativeAI(API_KEY)
  console.log('‚úÖ Gemini AI initialized successfully')
} else {
  console.warn('‚ö†Ô∏è Gemini API key not configured. AI features will use mock data.')
  console.warn('To enable AI features, add your API key to .env file as VITE_GEMINI_API_KEY')
}

// Initialize AI service (can be called manually if needed)
export const initializeAI = (apiKey) => {
  genAI = new GoogleGenerativeAI(apiKey)
  console.log('‚úÖ Gemini AI initialized with provided key')
}

export const analyzeErrors = async (wrongAnswers) => {
  if (!genAI) {
    return generateMockErrorAnalysis(wrongAnswers)
  }

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" })

    const prompt = `
    Jeste≈õ ekspertem od gramatyki angielskiej. U≈ºytkownik pope≈Çni≈Ç b≈Çƒôdy w te≈õcie dotyczƒÖcym r√≥≈ºnic miƒôdzy Past Simple a Present Perfect. 

    Oto b≈Çƒôdne odpowiedzi:
    ${wrongAnswers.map(answer => `
    Pytanie: ${answer.question}
    Wybrana odpowied≈∫: ${answer.selectedAnswer}
    Prawid≈Çowa odpowied≈∫: ${answer.correctAnswer}
    `).join('\n')}

    Przeanalizuj te b≈Çƒôdy i napisz szczeg√≥≈ÇowƒÖ analizƒô w jƒôzyku polskim, kt√≥ra zawiera:

    1. **G≈Ç√≥wne problemy** - zidentyfikuj wzorce w b≈Çƒôdach
    2. **Spersonalizowane porady** - konkretne wskaz√≥wki dla tego u≈ºytkownika
    3. **Dodatkowe przyk≈Çady** - 2-3 przyk≈Çady podobne do pope≈Çnionych b≈Çƒôd√≥w
    4. **Plan nauki** - kroki kt√≥re pomogƒÖ uniknƒÖƒá tych b≈Çƒôd√≥w w przysz≈Ço≈õci

    Formatuj odpowied≈∫ u≈ºywajƒÖc Markdown (nag≈Ç√≥wki, listy, pogrubienia).
    `

    const result = await model.generateContent(prompt)
    const response = result.response
    return response.text()
  } catch (error) {
    console.error('Error analyzing with AI:', error)
    return generateMockErrorAnalysis(wrongAnswers)
  }
}

export const generateNewQuiz = async (topic = 'Past Simple vs Present Perfect') => {
  if (!genAI) {
    return generateMockQuestions()
  }

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" })

    const prompt = `
    Wygeneruj 10 nowych pyta≈Ñ testowych na temat: "${topic}" w jƒôzyku angielskim z wyja≈õnieniami w jƒôzyku polskim.

    Format odpowiedzi to JSON array z obiektami zawierajƒÖcymi:
    - id: numer pytania (1-10)
    - sentence: zdanie z lukƒÖ oznaczonƒÖ jako ______
    - options: array z dwoma opcjami odpowiedzi
    - correct: indeks prawid≈Çowej odpowiedzi (0 lub 1)
    - explanation: szczeg√≥≈Çowe wyja≈õnienie po polsku dlaczego ta odpowied≈∫ jest prawid≈Çowa

    Przyk≈Çad formatu:
    [
      {
        "id": 1,
        "sentence": "I ______ there yesterday.",
        "options": ["went", "have gone"],
        "correct": 0,
        "explanation": "U≈ºywamy Past Simple..."
      }
    ]

    Pytania powinny byƒá r√≥≈ºnorodne i testowaƒá r√≥≈ºne aspekty tematu. Zwr√≥ƒá tylko JSON bez dodatkowego tekstu.
    `

    const result = await model.generateContent(prompt)
    const response = result.response.text()
    
    // Clean the response to extract only JSON
    const jsonMatch = response.match(/\[[\s\S]*\]/)
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0])
    } else {
      throw new Error('Invalid JSON response')
    }
  } catch (error) {
    console.error('Error generating quiz with AI:', error)
    return generateMockQuestions()
  }
}

export const generateCustomQuiz = async (topic) => {
  if (!genAI) {
    return generateMockCustomQuestions(topic)
  }

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" })

    const prompt = `
    Wygeneruj 10 pyta≈Ñ testowych na temat gramatyki angielskiej: "${topic}".

    Wymagania:
    - Pytania w jƒôzyku angielskim
    - Wyja≈õnienia w jƒôzyku polskim
    - R√≥≈ºnorodno≈õƒá poziom√≥w trudno≈õci
    - Praktyczne przyk≈Çady

    Format odpowiedzi to JSON array z obiektami zawierajƒÖcymi:
    - id: numer pytania (1-10)
    - sentence: zdanie z lukƒÖ oznaczonƒÖ jako ______
    - options: array z dwoma opcjami odpowiedzi
    - correct: indeks prawid≈Çowej odpowiedzi (0 lub 1)
    - explanation: szczeg√≥≈Çowe wyja≈õnienie po polsku

    Zwr√≥ƒá tylko JSON bez dodatkowego tekstu.
    `

    const result = await model.generateContent(prompt)
    const response = result.response.text()
    
    // Clean the response to extract only JSON
    const jsonMatch = response.match(/\[[\s\S]*\]/)
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0])
    } else {
      throw new Error('Invalid JSON response')
    }
  } catch (error) {
    console.error('Error generating custom quiz with AI:', error)
    return generateMockCustomQuestions(topic)
  }
}

// Mock functions for demo purposes
const generateMockErrorAnalysis = (wrongAnswers) => {
  return `
# üìä Analiza Twoich B≈Çƒôd√≥w

## G≈Ç√≥wne Problemy
Pope≈Çni≈Çe≈õ **${wrongAnswers.length}** b≈Çƒôd√≥w w te≈õcie. Oto g≈Ç√≥wne wzorce:

- **Problem z okre≈õlaniem czasu**: Trudno≈õci z rozpoznawaniem, czy czynno≈õƒá ma konkretny czas w przesz≈Ço≈õci
- **S≈Çowa kluczowe**: Brak uwagi na wska≈∫niki czasowe jak "yesterday", "since", "ever"
- **Skutki w tera≈∫niejszo≈õci**: Problemy z rozpoznawaniem, czy przesz≈Ça czynno≈õƒá wp≈Çywa na tera≈∫niejszo≈õƒá

## üéØ Spersonalizowane Porady

1. **Naucz siƒô s≈Ç√≥w kluczowych na pamiƒôƒá**
   - Past Simple: yesterday, last week, ago, in 2020, when
   - Present Perfect: ever, never, just, already, yet, since, for

2. **Zadawaj sobie pytanie**: "Czy to ma wp≈Çyw na teraz?"
   - Je≈õli TAK ‚Üí Present Perfect
   - Je≈õli NIE ‚Üí Past Simple

3. **Zwracaj uwagƒô na kontekst**
   - Osoby zmar≈Çe = zawsze Past Simple
   - Okresy zako≈Ñczone = Past Simple
   - Do≈õwiadczenia bez konkretnego czasu = Present Perfect

## üìö Dodatkowe Przyk≈Çady

**Past Simple:**
- I visited Paris in 2019. (konkretny rok)
- Mozart wrote beautiful music. (nie ≈ºyje)

**Present Perfect:**
- I have visited Paris many times. (do≈õwiadczenie)
- Someone has broken the window. (efekt widoczny teraz)

## üó∫Ô∏è Plan Nauki

1. **Tydzie≈Ñ 1**: Naucz siƒô s≈Ç√≥w kluczowych
2. **Tydzie≈Ñ 2**: ƒÜwicz rozpoznawanie kontekstu
3. **Tydzie≈Ñ 3**: RozwiƒÖzuj wiƒôcej test√≥w
4. **Tydzie≈Ñ 4**: Skoncentruj siƒô na trudnych przypadkach

**Powodzenia w nauce! üöÄ**
  `
}

const generateMockQuestions = () => {
  return [
    {
      id: 1,
      sentence: "I ______ my lunch already.",
      options: ["ate", "have eaten"],
      correct: 1,
      explanation: "U≈ºywamy Present Perfect z 'already', kt√≥re wskazuje na czynno≈õƒá zako≈ÑczonƒÖ ale majƒÖcƒÖ znaczenie dla tera≈∫niejszo≈õci."
    },
    {
      id: 2,
      sentence: "They ______ to Spain last summer.",
      options: ["went", "have gone"],
      correct: 0,
      explanation: "U≈ºywamy Past Simple z 'last summer', kt√≥re oznacza konkretny, zako≈Ñczony okres w przesz≈Ço≈õci."
    }
    // Add more mock questions as needed...
  ]
}

const generateMockCustomQuestions = (topic) => {
  return [
    {
      id: 1,
      sentence: `This is a sample question about ${topic}. I ______ this concept.`,
      options: ["understand", "understood"],
      correct: 0,
      explanation: `To jest przyk≈Çadowe pytanie wygenerowane dla tematu: ${topic}. W rzeczywistej aplikacji, AI wygenerowa≈Çoby odpowiednie pytania.`
    }
  ]
}